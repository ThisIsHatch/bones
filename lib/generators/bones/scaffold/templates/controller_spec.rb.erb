require 'spec_helper'

describe <%%= controller_class_name %>Controller do

  setup :activate_authlogic 
  
  describe 'a logged out user' do
    
    setup :logout
    
    describe 'on GET index' do

      before { get :index }

      it { should respond_with :redirect }
      it { should set_the_flash.to(/must.*logged.*in/i) }
      it { should redirect_to :login }
    end
    
    describe 'on GET show' do

      let(:<%%= file_name %>) { create :<%%= file_name %> }

      before { get :show , :id => <%%= file_name %>.to_param }

      it { should respond_with :redirect }
      it { should set_the_flash.to(/must.*logged.*in/i) }
      it { should redirect_to :login }
    end
    
    describe 'on GET new' do

      before {  get :new }
    
      it { should respond_with :redirect }
      it { should set_the_flash.to(/must.*logged.*in/i) }
      it { should redirect_to :login }
    end
    
    describe 'on POST create' do
    
      before { post :create, :<%%= file_name -%> => {} }
    
      it { should respond_with :redirect }
      it { should set_the_flash.to(/must.*logged.*in/i) }
      it { should redirect_to :login }
    end
    
    describe 'on GET edit' do

      let(:<%%= file_name %>) { create :<%%= file_name %> }
      
      before { get :edit, :id => <%%= file_name %>.to_param }
    
      it { should respond_with :redirect }
      it { should set_the_flash.to(/must.*logged.*in/i) }
      it { should redirect_to :login }
    end
    
    describe 'on PUT update' do

      let(:<%%= file_name %>) { create :<%%= file_name %> }

      before do
        put :update, :id => <%%= file_name -%>.to_param, :<%%= file_name -%> => {}
      end
    
      it { should respond_with :redirect }
      it { should set_the_flash.to(/must.*logged.*in/i) }
      it { should redirect_to :login }
    end
 
    describe 'on DELETE destroy' do

      let(:<%%= file_name %>) { create :<%%= file_name %> }

      before { delete :destroy, :id => <%%= file_name %>.to_param }
    
      it { should respond_with :redirect }
      it { should set_the_flash.to(/must.*logged.*in/i) }
      it { should redirect_to :login }
    end
     
  end
  # Logged out user

  # <%= roles.map(&:humanize).join(', ') %>
  [:<%= roles.join(', :') %>].each do |role|

    describe "a logged in #{role}" do 

      before { login_with(role) }

      describe 'on GET index' do
      
        let(:<%%= file_name %>) { 2.times.map { create :<%%= file_name %> } }
        
        before { get :index }

        it { should respond_with :success }
        it { should render_template :index }
        it { should assign_to(:<%%= table_name %>).with(<%%= table_name %>) }
      end
      # GET index
  
      describe 'on GET show' do
        
        let(:<%%= file_name %>) { create :<%%= file_name %> }
        
        before { get :show, :id => <%%= file_name %>.to_param }
        
        it { should respond_with :success }
        it { should render_template :show }
        it { should assign_to(:<%%= file_name %>).with(<%%= file_name %>) }
      end
      # GET show
  
      describe 'on GET new' do

        let(:<%%= file_name %>) { build :<%%= file_name %> }
        
        before { get :new }

        it { should respond_with :success }
        it { should render_template :new }
        it { should assign_to(:<%%= file_name %>).with(<%%= file_name %>) }
      end

      describe 'on POST create' do

        let(:<%%= file_name %>) { build :<%%= file_name %> }
        
        before do
          stub(<%%= class_name -%>).new { <%%= file_name %> }
        end

        describe "on failed save" do

          before do
            any_instance_of(<%%= class_name -%>) do
              stub(<%%= class_name -%>).save { false }
            end
            
            post :create, :<%%= file_name %> => {}
          end
  
          it { should respond_with :success }
          it { should render_template :new }
          it { should assign_to(:<%%= file_name %>).with(<%%= file_name %>) }
        end
  
        describe "on successful save" do
  
          before { post :create, :<%%= file_name %> => {} }
  
          it {should redirect_to <%%= file_name %>}
          it { should set_the_flash.to(/created/i) }
        end
      end
      # POST create

      describe 'on GET edit' do
      
        let(:<%%= file_name %>) { create :<%%= file_name %> }
      
        before { get :edit, :id => <%%= file_name %>.to_param }
      
        it { should respond_with :success }
        it { should render_template(:edit) }
        it { should assign_to(:<%%= file_name %>).with(<%%= file_name %>) }
      end
      # GET edit
    
      describe "on PUT :update" do
        
        let(:<%%= file_name %>) { create :<%%= file_name %> }
  
        describe "on failed update" do
  
          before do
            any_instance_of(<%%= class_name -%>) do
              stub(<%%= class_name -%>).update_attributes { false }
            end
            
            put :update, :id => <%%= file_name %>.to_param, :<%%= file_name %> => {}
          end
  
          it { should respond_with :success }
          it { should render_template :edit }
          it { should assign_to(:<%%= file_name %>).with(<%%= file_name %>) }
        end
  
        describe "on successful update" do
  
          before do
            put :update, :id => <%%= file_name %>.to_param, :<%%= file_name %> => {}
          end
  
          it {should redirect_to(:action => 'show')}
          it { should set_the_flash.to(/updated/i) }
        end
      end
      # PUT update
      
      describe "on DELETE :destroy" do
        
        let(:<%%= file_name %>) { create :<%%= file_name %> }
  
        describe "on failed destroy" do
  
          before do
            any_instance_of(<%%= class_name -%>) do 
              stub(<%%= class_name -%>).destroy { false }
            end
            
            delete :destroy, :id => <%%= file_name %>.to_param
          end
  
          it { should redirect_to :<%%= table_name %> }
          it { should set_the_flash.to(/failed/i) }
        end
  
        describe "on successful destroy" do
  
          before { delete :destroy, :id => <%%= file_name %>.to_param }
  
          it { should redirect_to :<%%= table_name %> }
          it { should set_the_flash.to(/deleted/i) }
        end
      end
      # DELETE destroy
  
    end
  
  end
  # <%= roles.map(&:humanize).join(', ') %>
    
end
